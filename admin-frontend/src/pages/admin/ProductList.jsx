import React, { useEffect, useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import { FiEdit, FiTrash } from "react-icons/fi";
import { useNavigate } from "react-router-dom";

const ProductList = () => {
  const navigate = useNavigate();

  // üîí Ki·ªÉm tra ƒëƒÉng nh·∫≠p & quy·ªÅn admin
  useEffect(() => {
    const token = localStorage.getItem("token");
    const role = localStorage.getItem("role"); // l∆∞u role khi login
    if (!token || role !== "admin") {
      toast.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p quy·ªÅn admin!");
      navigate("/login");
    }
  }, [navigate]);

  // üß© State qu·∫£n l√Ω d·ªØ li·ªáu
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [editId, setEditId] = useState(null);
  const [imageFile, setImageFile] = useState(null);
  const [oldImage, setOldImage] = useState("");

  const [formData, setFormData] = useState({
    name: "",
    brand: "",
    price: "",
    description: "",
    ingredients: "",
    skinType: "all",
    stock: "",
    expiryDate: "",
    discount: "",
    category: "",
  });

  // üßæ L·∫•y danh s√°ch s·∫£n ph·∫©m & danh m·ª•c
  useEffect(() => {
    fetchProducts();
    fetchCategories();
  }, []);

  const fetchProducts = async () => {
    try {
      const token = localStorage.getItem("token");
      const res = await axios.get("http://localhost:3001/api/products", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setProducts(res.data.data || []);
    } catch (error) {
      console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", error);
      toast.error("‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch s·∫£n ph·∫©m");
    }
  };

  const fetchCategories = async () => {
  try {
    const res = await axios.get("http://localhost:3001/api/categories");

    console.log("üì¶ Categories t·ª´ server:", res.data); // ki·ªÉm tra
    // V√¨ API tr·∫£ v·ªÅ m·∫£ng tr·ª±c ti·∫øp, ta g√°n th·∫≥ng res.data
    setCategories(Array.isArray(res.data) ? res.data : []);
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i danh m·ª•c:", error);
    toast.error("Kh√¥ng th·ªÉ t·∫£i danh m·ª•c");
  }
};


  // ‚ùå Xo√° s·∫£n ph·∫©m
  const handleDelete = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° s·∫£n ph·∫©m n√†y?")) {
      try {
        const token = localStorage.getItem("token");
        await axios.delete(`http://localhost:3001/api/products/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        toast.success("‚úÖ ƒê√£ xo√° s·∫£n ph·∫©m!");
        fetchProducts();
      } catch (error) {
        console.error("L·ªói khi xo√° s·∫£n ph·∫©m:", error);
        toast.error("‚ùå Kh√¥ng xo√° ƒë∆∞·ª£c s·∫£n ph·∫©m");
      }
    }
  };

  // ‚úèÔ∏è S·ª≠a s·∫£n ph·∫©m
  const handleEdit = (p) => {
    setFormData({
      name: p.name,
      brand: p.brand,
      price: p.price,
      description: p.description,
      ingredients: p.ingredients || "",
      skinType: p.skinType || "all",
      stock: p.stock || "",
      expiryDate: p.expiryDate ? p.expiryDate.split("T")[0] : "",
      discount: p.discount || "",
      category: p.category?._id || "",
    });
    setOldImage(p.image);
    setImageFile(null);
    setEditId(p._id);
    setShowForm(true);
  };

  // üñäÔ∏è Nh·∫≠p d·ªØ li·ªáu form
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // üì∑ ·∫¢nh
  const handleImageChange = (e) => setImageFile(e.target.files[0]);

  // üíæ G·ª≠i form th√™m/s·ª≠a
  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem("token");
    if (!token) return toast.error("‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");

    try {
      const data = new FormData();
      for (const key in formData) data.append(key, formData[key]);
      if (imageFile) data.append("image", imageFile);

      if (editId) {
        await axios.put(`http://localhost:3001/api/products/${editId}`, data, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        });
        toast.success("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
      } else {
        if (!imageFile) return toast.error("‚ùå Vui l√≤ng ch·ªçn ·∫£nh s·∫£n ph·∫©m");
        await axios.post("http://localhost:3001/api/products", data, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        });
        toast.success("‚úÖ Th√™m s·∫£n ph·∫©m m·ªõi th√†nh c√¥ng!");
      }

      setShowForm(false);
      setFormData({
        name: "",
        brand: "",
        price: "",
        description: "",
        ingredients: "",
        skinType: "all",
        stock: "",
        expiryDate: "",
        discount: "",
        category: "",
      });
      setImageFile(null);
      setOldImage("");
      setEditId(null);
      fetchProducts();
    } catch (error) {
      console.error("L·ªói khi th√™m/s·ª≠a s·∫£n ph·∫©m:", error);
      toast.error("‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u s·∫£n ph·∫©m");
    }
  };

  // üîç T√¨m ki·∫øm
  const filteredProducts = products.filter((p) =>
    p.name?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // üñ•Ô∏è Giao di·ªán
  return (
    <div className="p-4 bg-white dark:bg-gray-900 min-h-full text-gray-800 dark:text-white">
      <div className="flex flex-col md:flex-row justify-between items-center mb-4 gap-4">
        <h1 className="text-2xl font-bold mb-6">üíÑ Qu·∫£n l√Ω s·∫£n ph·∫©m m·ªπ ph·∫©m</h1>

        <div className="flex gap-2">
          <input
            type="text"
            placeholder="T√¨m s·∫£n ph·∫©m..."
            className="p-2 border rounded w-64 dark:bg-gray-800 dark:text-white"
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <button
            onClick={() => {
              setShowForm(true);
              setEditId(null);
              setFormData({
                name: "",
                brand: "",
                price: "",
                description: "",
                ingredients: "",
                skinType: "all",
                stock: "",
                expiryDate: "",
                discount: "",
                category: "",
              });
              setImageFile(null);
              setOldImage("");
            }}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
          >
            + Th√™m s·∫£n ph·∫©m
          </button>
        </div>
      </div>

      {/* Danh s√°ch s·∫£n ph·∫©m */}
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white dark:bg-gray-800 shadow rounded-lg">
          <thead className="bg-gray-100 dark:bg-gray-700">
            <tr>
              <th className="py-2 px-4">·∫¢nh</th>
              <th className="py-2 px-4 text-left">T√™n</th>
              <th className="py-2 px-4 text-left">Th∆∞∆°ng hi·ªáu</th>
              <th className="py-2 px-4 text-left">Gi√°</th>
              <th className="py-2 px-4 text-left">Danh m·ª•c</th>
              <th className="py-2 px-4 text-left">Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredProducts.map((p, idx) => (
              <tr
                key={p._id || idx}
                className="border-b border-gray-200 dark:border-gray-700"
              >
                <td className="py-2 px-4">
                  <img
                    src={p.image}
                    alt={p.name}
                    className="w-20 h-20 object-cover rounded"
                  />
                </td>
                <td className="py-2 px-4">{p.name}</td>
                <td className="py-2 px-4">{p.brand}</td>
                <td className="py-2 px-4">
                  {p.price?.toLocaleString("vi-VN")}‚Ç´
                </td>
                <td className="py-2 px-4">{p.category?.name || "Ch∆∞a c√≥"}</td>
                <td className="py-2 px-4 flex gap-2">
                  <button
                    onClick={() => handleEdit(p)}
                    className="text-blue-600 hover:text-blue-800"
                    title="S·ª≠a"
                  >
                    <FiEdit size={18} />
                  </button>
                  <button
                    onClick={() => handleDelete(p._id)}
                    className="text-red-600 hover:text-red-800"
                    title="Xo√°"
                  >
                    <FiTrash size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {filteredProducts.length === 0 && (
          <p className="text-center mt-4 text-gray-500">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o.</p>
        )}
      </div>

      {/* Form th√™m/s·ª≠a */}
      {showForm && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 w-full max-w-3xl">
            <h2 className="text-xl font-bold mb-4">
              {editId ? "S·ª≠a s·∫£n ph·∫©m" : "Th√™m s·∫£n ph·∫©m m·ªõi"}
            </h2>
            <form
              onSubmit={handleSubmit}
              encType="multipart/form-data"
              className="space-y-4"
            >
              <div className="grid grid-cols-2 gap-4">
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  placeholder="T√™n s·∫£n ph·∫©m"
                  className="p-2 border rounded"
                  required
                />
                <input
                  type="text"
                  name="brand"
                  value={formData.brand}
                  onChange={handleChange}
                  placeholder="Th∆∞∆°ng hi·ªáu"
                  className="p-2 border rounded"
                />
                <input
                  type="number"
                  name="price"
                  value={formData.price}
                  onChange={handleChange}
                  placeholder="Gi√°"
                  className="p-2 border rounded"
                  required
                />
                <input
                  type="number"
                  name="stock"
                  value={formData.stock}
                  onChange={handleChange}
                  placeholder="S·ªë l∆∞·ª£ng"
                  className="p-2 border rounded"
                />
                <select
                  name="category"
                  value={formData.category}
                  onChange={handleChange}
                  className="p-2 border rounded"
                  required
                >
                  <option value="">-- Ch·ªçn danh m·ª•c --</option>
                  {categories.map((c) => (
                    <option key={c._id} value={c._id}>
                      {c.name}
                    </option>
                  ))}
                </select>
                <select
                  name="skinType"
                  value={formData.skinType}
                  onChange={handleChange}
                  className="p-2 border rounded"
                >
                  <option value="all">M·ªçi lo·∫°i da</option>
                  <option value="dry">Da kh√¥</option>
                  <option value="oily">Da d·∫ßu</option>
                  <option value="sensitive">Da nh·∫°y c·∫£m</option>
                  <option value="normal">Da th∆∞·ªùng</option>
                </select>
              </div>

              <textarea
                name="description"
                value={formData.description}
                onChange={handleChange}
                placeholder="M√¥ t·∫£ s·∫£n ph·∫©m..."
                className="w-full p-2 border rounded"
                rows={4}
              />

              <input
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                className="w-full"
              />
              {(imageFile || oldImage) && (
                <img
                  src={imageFile ? URL.createObjectURL(imageFile) : oldImage}
                  alt="preview"
                  className="w-32 h-32 mt-2 object-cover rounded"
                />
              )}

              <div className="flex justify-end gap-3 pt-3">
                <button
                  type="submit"
                  className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                >
                  {editId ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}
                </button>
                <button
                  type="button"
                  onClick={() => setShowForm(false)}
                  className="bg-gray-400 text-white px-4 py-2 rounded hover:bg-gray-500"
                >
                  Hu·ª∑
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductList;
